{% set name = "ldas-tools-framecpp-swig" %}
{% set version = "2.6.11" %}
{% set sha256 = "7cc2f167473940a70e4f2710460b33a6579ed1ed7529f296cb3e72fae3a024b5" %}

# dependencies
{% set ldas_tools_cmake_version = "1.2.2" %}
{% set ldas_tools_al_version = "2.6.5" %}
{% set ldas_tools_al_swig_version = "2.6.8" %}
{% set ldas_tools_framecpp_version = "2.7.1" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: http://software.ligo.org/lscsoft/source/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  skip: true  # [win or python_impl == 'pypy']

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake >=3.6
    - pkg-config  # [not win]
  host:
    - ldas-tools-cmake >={{ ldas_tools_cmake_version }}
    - ldas-tools-framecpp >={{ ldas_tools_framecpp_version }}
    - swig >=3.0.7
  run:
    - ldas-tools-framecpp >={{ ldas_tools_framecpp_version }}

test:
  commands:
    - test -f ${PREFIX}/include/framecpp/frameCPP.i  # [not win]
    - test -f ${PREFIX}/include/framecpp/python/frameCPPMacros.i  # [not win]

outputs:
  - name: ldas-tools-framecpp-swig

  - name: python-ldas-tools-framecpp
    script: install-python.sh
    build:
      activate_in_script: true
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake >=3.6
        - pkg-config  # [not win]
      host:
        - ldas-tools-cmake >={{ ldas_tools_cmake_version }}
        - ldas-tools-al >={{ ldas_tools_al_version }}
        - ldas-tools-framecpp >={{ ldas_tools_framecpp_version }}
        - {{ pin_subpackage('ldas-tools-framecpp-swig', exact=True) }}
        - numpy
        - python
        - swig >=3.0.7
      run:
        - ldas-tools-al >={{ ldas_tools_al_version }}
        - ldas-tools-framecpp >={{ ldas_tools_framecpp_version }}
        - {{ pin_compatible('numpy') }}
        - python
        - python-ldas-tools-al >={{ ldas_tools_al_swig_version }}
    test:
      imports:
        - LDAStools.frameCPP
      commands:
        # generate a test file, then read the channel list out of it
        - framecpp_sample
        - python -c "from LDAStools import frameCPP; stream = frameCPP.IFrameFStream('Z-ilwd_test_frame-600000000-1.gwf'); toc = stream.GetTOC(); print(toc.GetADC())"
    about:
      home: https://wiki.ligo.org/Computing/LDASTools
      dev_url: https://git.ligo.org/ldastools/LDAS_Tools
      license: GPL-3.0-or-later
      license_family: GPL
      license_file: COPYING
      summary: Python bindings for the LDAS Tools frameCPP library
      description: Python bindings for the LDAS Tools frameCPP library

about:
  home: https://wiki.ligo.org/Computing/LDASTools
  dev_url: https://git.ligo.org/ldastools/LDAS_Tools
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: COPYING
  summary: SWIG bindings for the LDAS Tools frameCPP library

extra:
  recipe-maintainers:
    - duncanmmacleod
    - emaros
